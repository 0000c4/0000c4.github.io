{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\nimport AuthService from '../services/auth-service';\nimport noteService from '../services/note-service';\nimport localdb from '../local_db/localdb';\nexport default class Store {\n  constructor() {\n    //auth data\n    this.user = {};\n    this.isAuth = false;\n    //notes data\n    this.notes = [];\n    this.searchedNotes = [];\n    makeAutoObservable(this);\n  }\n  setAuth(auth) {\n    this.isAuth = auth;\n  }\n  setUser(user) {\n    this.user = user;\n  }\n  setNotes(notes) {\n    this.notes = notes;\n  }\n  setSearchedNotes(notes) {\n    this.searchedNotes = notes;\n  }\n  async login(email, password) {\n    try {\n      const response = await AuthService.login(email, password);\n      console.log(response);\n      localStorage.setItem('token', response.accessToken);\n      this.setAuth(true);\n      this.setUser(response.user);\n      this.getNotes();\n    } catch (error) {\n      return error.response.data;\n    }\n  }\n  async registration(email, password, name) {\n    try {\n      const response = await AuthService.registration(email, password, name);\n      console.log(response);\n      localStorage.setItem('token', response.accessToken);\n      this.setAuth(true);\n      this.setUser(response.user);\n    } catch (error) {\n      return error.response.data;\n    }\n  }\n  async logout() {\n    try {\n      console.log('logout');\n      await AuthService.logout();\n      localStorage.removeItem('token');\n      this.setAuth(false);\n      this.setUser({});\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  async checkAuth() {\n    try {\n      await this.syncWithServer();\n      const response = await AuthService.checkAuth();\n      localStorage.setItem('token', response.accessToken);\n      this.setAuth(true);\n      this.setUser(response.user);\n    } catch (error) {}\n  }\n  async sendResetPasswordEmail(email) {\n    try {\n      const response = await AuthService.sendResetPasswordEmail(email);\n      console.log(response);\n    } catch (error) {\n      return error.response.data;\n    }\n  }\n\n  //notes\n  async getNotes() {\n    let LocalNotes = await localdb.getAll();\n    this.setNotes(LocalNotes.filter(note => note.status !== 'delete'));\n    console.log(LocalNotes);\n    noteService.get().then(async res => {\n      //если сервер доступен проверяем нет ли новых заметок от сервера, если есть добавляем в бд и обновляем ьассив\n      if (res.status == 200) {\n        console.log('ну и где блять');\n        res.data.forEach(async serverNote => {\n          //проходимся по каждой заметки из сервера и проверяем по _id есть ли она в локальной бд\n          const isSynced = LocalNotes.find(element => element._id == serverNote._id);\n          if (isSynced == undefined) await localdb.put({\n            ...serverNote,\n            status: 'sync'\n          });\n        });\n        LocalNotes = await localdb.getAll();\n        this.setNotes(LocalNotes.filter(note => note.status !== 'delete'));\n      }\n    });\n  }\n  async editNote(note, sync) {\n    try {\n      //пофиксить изменение несинхронизированных заметок\n      await localdb.put({\n        ...note,\n        status: 'edit'\n      }); //сначала изменяем заметку в локалбд и стейте, если сервер доступен синхронизируемся с ним\n      this.setNotes(this.notes.map(elem => elem._id == note._id ? elem = note : elem));\n      noteService.edit(note).then(res => {\n        if (res.status == 200) {\n          localdb.put({\n            ...res.data,\n            status: 'sync'\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {}\n  }\n  async AddNote(note, sync) {\n    try {\n      // setIsSync(true)\n      const localNote = {\n        ...note,\n        status: 'new',\n        _id: new Date()\n      }; //сначала создаем заметку в бд\n      await localdb.put(localNote);\n      this.setNotes([...this.notes, localNote]);\n      noteService.add(note).then(res => {\n        //если сервер доступен удаляем заметку из notes и меняем ее на валидную\n        if (res.status == 200) {\n          const syncNote = res.data;\n          const notes = this.notes.filter(e => e._id !== localNote._id);\n          localdb.delete(localNote._id);\n          localdb.put({\n            ...syncNote,\n            status: 'sync'\n          });\n          this.setNotes([...notes, syncNote]);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      //setIsSync(false)\n    }\n  }\n  async RemoveNote(note, sync) {\n    try {\n      await localdb.put({\n        ...note,\n        status: 'delete'\n      }); //сначала меняем status заметки на delete\n      const notes = this.notes.filter(e => e._id !== note._id);\n      noteService.delete(note).then(res => {\n        //если сервер доступен удаляем заметку из localdb\n        if (res.status == 200) {\n          localdb.delete(note._id);\n        }\n      });\n      this.setNotes(notes);\n    } catch (error) {}\n  }\n  async syncWithServer() {\n    //блять я ни черта не понимаю ебучий индекседб какой же говнокод нахуй\n    let transactions = []; //хранит массив операций для дальнейшего выполнения всего в одной транзакции\n    noteService.get().then(async res => {\n      //если сервер доступен синхронизируем локалбд и сервер\n      if (res.status == 200) {\n        const localNotes = await localdb.getAll(); //получаем заметки из локалдб и проверяем их статус синхронизации\n        localNotes.forEach(async note => {\n          console.log(note.status);\n          if (note.status == 'edit') {\n            const SyncedEdit = await noteService.edit(note);\n            if (SyncedEdit.status == 200) {\n              console.log('work blyat syka');\n              await localdb.put({\n                ...SyncedEdit.data,\n                status: 'sync'\n              });\n            }\n          } else if (note.status == 'new') {\n            const SyncedNew = await noteService.add(note);\n            if (SyncedNew.status == 200) {\n              await localdb.delete(note._id);\n              await localdb.put({\n                ...SyncedNew.data,\n                status: 'sync'\n              });\n            }\n          } else if (note.status == 'delete') {\n            const SyncedDelete = await noteService.delete(note);\n            if (SyncedDelete.status == 200) {\n              console.log('its work');\n              await localdb.delete(note._id);\n            }\n          }\n        });\n      }\n    });\n  }\n  NoteSearch(search) {\n    const notes = this.notes.filter(note => note.title.toLowerCase().includes(search.toLowerCase())).concat(this.notes.filter(note => note.body.toLowerCase().includes(search.toLowerCase())));\n    this.setSearchedNotes(notes);\n  }\n}","map":{"version":3,"names":["makeAutoObservable","AuthService","noteService","localdb","Store","constructor","user","isAuth","notes","searchedNotes","setAuth","auth","setUser","setNotes","setSearchedNotes","login","email","password","response","console","log","localStorage","setItem","accessToken","getNotes","error","data","registration","name","logout","removeItem","checkAuth","syncWithServer","sendResetPasswordEmail","LocalNotes","getAll","filter","note","status","get","then","res","forEach","serverNote","isSynced","find","element","_id","undefined","put","editNote","sync","map","elem","edit","AddNote","localNote","Date","add","syncNote","e","delete","RemoveNote","transactions","localNotes","SyncedEdit","SyncedNew","SyncedDelete","NoteSearch","search","title","toLowerCase","includes","concat","body"],"sources":["C:/Users/vasja/coding/notes_pwa/src/store/Store.js"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport AuthService from '../services/auth-service';\r\nimport noteService from '../services/note-service';\r\nimport localdb from '../local_db/localdb';\r\nexport default class Store {\r\n    //auth data\r\n    user = {};\r\n    isAuth = false;\r\n\r\n    //notes data\r\n    notes = [];\r\n    searchedNotes = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setAuth(auth) {\r\n        this.isAuth = auth;\r\n    }\r\n    setUser(user) {\r\n        this.user = user;\r\n    }\r\n\r\n    setNotes(notes) {\r\n        this.notes = notes;\r\n    }\r\n    setSearchedNotes(notes) {\r\n        this.searchedNotes = notes;\r\n    }\r\n\r\n    async login(email, password) {\r\n        try {\r\n            const response = await AuthService.login(email, password);\r\n            console.log(response);\r\n            localStorage.setItem('token', response.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.user)\r\n            this.getNotes();\r\n\r\n        } catch (error) {\r\n            return error.response.data;\r\n        }\r\n    }\r\n\r\n    async registration(email, password, name) {\r\n        try {\r\n            const response = await AuthService.registration(email, password, name);\r\n            console.log(response);\r\n            localStorage.setItem('token', response.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.user);\r\n        } catch (error) {\r\n            return error.response.data;\r\n        }\r\n    }\r\n    async logout() {\r\n        try {\r\n            console.log('logout')\r\n            await AuthService.logout();\r\n            localStorage.removeItem('token')\r\n            this.setAuth(false);\r\n            this.setUser({});\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    async checkAuth() {\r\n        try {\r\n            await this.syncWithServer()\r\n            const response = await AuthService.checkAuth();\r\n            localStorage.setItem('token', response.accessToken)\r\n            this.setAuth(true);\r\n            this.setUser(response.user)\r\n\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    async sendResetPasswordEmail(email) {\r\n        try {\r\n            const response = await AuthService.sendResetPasswordEmail(email);\r\n            console.log(response)\r\n        } catch (error) {\r\n            return error.response.data;\r\n        }\r\n    }\r\n\r\n    //notes\r\n    async getNotes() {\r\n        let LocalNotes = await localdb.getAll()\r\n        this.setNotes(LocalNotes.filter(note => note.status !== 'delete'));\r\n        console.log(LocalNotes)\r\n        noteService.get().then(async res => { //если сервер доступен проверяем нет ли новых заметок от сервера, если есть добавляем в бд и обновляем ьассив\r\n            if (res.status == 200) {\r\n                console.log('ну и где блять')\r\n                res.data.forEach(async serverNote => { //проходимся по каждой заметки из сервера и проверяем по _id есть ли она в локальной бд\r\n                    const isSynced = LocalNotes.find(element => element._id == serverNote._id)\r\n                    if (isSynced == undefined) await localdb.put({ ...serverNote, status: 'sync' })\r\n                    \r\n                });\r\n                LocalNotes = await localdb.getAll()\r\n                this.setNotes(LocalNotes.filter(note => note.status !== 'delete'));\r\n            }\r\n\r\n        })\r\n\r\n\r\n    }\r\n    async editNote(note, sync) {\r\n        try {\r\n            //пофиксить изменение несинхронизированных заметок\r\n            await localdb.put({ ...note, status: 'edit' })//сначала изменяем заметку в локалбд и стейте, если сервер доступен синхронизируемся с ним\r\n            this.setNotes(this.notes.map(elem => elem._id == note._id ? elem = note : elem))\r\n            noteService.edit(note).then(res => {\r\n                if (res.status == 200) {\r\n                    localdb.put({ ...res.data, status: 'sync' })\r\n                }\r\n            })\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        finally {\r\n        }\r\n\r\n\r\n    }\r\n    async AddNote(note, sync) {\r\n        try {\r\n            // setIsSync(true)\r\n            const localNote = { ...note, status: 'new', _id: new Date() } //сначала создаем заметку в бд\r\n            await localdb.put(localNote)\r\n            this.setNotes([...this.notes, localNote])\r\n            noteService.add(note).then(res => { //если сервер доступен удаляем заметку из notes и меняем ее на валидную\r\n                if (res.status == 200) {\r\n                    const syncNote = res.data;\r\n                    const notes = this.notes.filter(e => e._id !== localNote._id)\r\n                    localdb.delete(localNote._id)\r\n                    localdb.put({ ...syncNote, status: 'sync' })\r\n                    this.setNotes([...notes, syncNote])\r\n                }\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            //setIsSync(false)\r\n        }\r\n\r\n    }\r\n    async RemoveNote(note, sync) {\r\n        try {\r\n            await localdb.put({ ...note, status: 'delete' })//сначала меняем status заметки на delete\r\n            const notes = this.notes.filter(e => e._id !== note._id)\r\n            noteService.delete(note).then(res => { //если сервер доступен удаляем заметку из localdb\r\n                if (res.status == 200) {\r\n                    localdb.delete(note._id)\r\n                }\r\n            })\r\n\r\n            this.setNotes(notes)\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n    async syncWithServer() {\r\n        //блять я ни черта не понимаю ебучий индекседб какой же говнокод нахуй\r\n        let transactions = []; //хранит массив операций для дальнейшего выполнения всего в одной транзакции\r\n        noteService.get().then(async res => { //если сервер доступен синхронизируем локалбд и сервер\r\n            if (res.status == 200) {\r\n                const localNotes = await localdb.getAll();//получаем заметки из локалдб и проверяем их статус синхронизации\r\n                localNotes.forEach(async note => {\r\n                    console.log(note.status)\r\n                    if (note.status == 'edit') {\r\n                        const SyncedEdit = await noteService.edit(note)\r\n                        if (SyncedEdit.status == 200) {\r\n                            console.log('work blyat syka')\r\n                            await localdb.put({ ...SyncedEdit.data, status: 'sync' })\r\n                        }\r\n                    }\r\n                    else if (note.status == 'new') {\r\n                        const SyncedNew = await noteService.add(note)\r\n                        if (SyncedNew.status == 200) {\r\n\r\n                            await localdb.delete(note._id)\r\n                            await localdb.put({ ...SyncedNew.data, status: 'sync' })\r\n                        }\r\n                    }\r\n                    else if (note.status == 'delete') {\r\n\r\n                        const SyncedDelete = await noteService.delete(note)\r\n                        if (SyncedDelete.status == 200) {\r\n                            console.log('its work')\r\n                            await localdb.delete(note._id)\r\n                        }\r\n                    }\r\n\r\n                })\r\n            }\r\n\r\n        })\r\n    }\r\n    NoteSearch(search) {\r\n        const notes = this.notes.filter(note => note.title.toLowerCase().includes(search.toLowerCase()))\r\n            .concat(this.notes.filter(note => note.body.toLowerCase().includes(search.toLowerCase())))\r\n        this.setSearchedNotes(notes);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}