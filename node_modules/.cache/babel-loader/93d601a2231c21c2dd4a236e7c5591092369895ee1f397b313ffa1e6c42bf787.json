{"ast":null,"code":"import{openDB}from\"idb\";const db=await openDB('notes',1,{upgrade(db){// Create a store of objects\nconst store=db.createObjectStore('notes',{// The 'id' property of the object will be the key.\nkeyPath:'_id'});}});class localDb{constructor(){this.tx=db.transaction('notes','readwrite');this.init=()=>{let openRequest=indexedDB.open(\"notes\",1);// создаём хранилище объектов для books, если ешё не существует\nopenRequest.onupgradeneeded=function(){let db=openRequest.result;db.createObjectStore('notes',{keyPath:'_id'});// создаём хранилище\nif(!db.objectStoreNames.contains('notes')){// если хранилище \"books\" не существует\n}};};this.put=async _ref=>{let{_id,body,title,status}=_ref;await db.put('notes',{_id:_id,title:title,body:body,status:status});};this.delete=async _id=>{await db.delete('notes',_id);};this.getAll=async()=>{return await db.getAll('notes');};this.getOne=async _id=>{return await db.get('notes',_id);};}}export default new localDb();","map":{"version":3,"names":["openDB","db","upgrade","store","createObjectStore","keyPath","localDb","constructor","tx","transaction","init","openRequest","indexedDB","open","onupgradeneeded","result","objectStoreNames","contains","put","_ref","_id","body","title","status","delete","getAll","getOne","get"],"sources":["C:/Users/vasja/coding/notes_pwa/src/local_db/localdb.js"],"sourcesContent":["import { openDB } from \"idb\";\r\nconst db = await openDB('notes', 1, {\r\n    upgrade(db) {\r\n        // Create a store of objects\r\n        const store = db.createObjectStore('notes', {\r\n            // The 'id' property of the object will be the key.\r\n            keyPath: '_id',\r\n        });\r\n\r\n    },\r\n});\r\nclass localDb {\r\n    \r\n    tx = db.transaction('notes', 'readwrite');\r\n\r\n    init = () =>{\r\n        let openRequest = indexedDB.open(\"notes\", 1);\r\n        // создаём хранилище объектов для books, если ешё не существует\r\n        openRequest.onupgradeneeded = function() {\r\n          let db = openRequest.result;\r\n          db.createObjectStore('notes', {keyPath: '_id'}); // создаём хранилище\r\n          if (!db.objectStoreNames.contains('notes')) { // если хранилище \"books\" не существует\r\n\r\n          }\r\n        };\r\n    }\r\n\r\n    put = async ({ _id, body, title, status }) => {\r\n        await db.put('notes', {\r\n            _id: _id,\r\n            title: title,\r\n            body: body,\r\n            status: status\r\n        });\r\n    }\r\n    delete = async ( _id) => {\r\n        await db.delete('notes', _id);\r\n    }\r\n    getAll = async () => {\r\n        return await db.getAll('notes');\r\n\r\n    }\r\n    getOne = async (_id) => {\r\n        return await db.get('notes',_id);\r\n    }\r\n}\r\n\r\nexport default new localDb();\r\n\r\n"],"mappings":"AAAA,OAASA,MAAM,KAAQ,KAAK,CAC5B,KAAM,CAAAC,EAAE,CAAG,KAAM,CAAAD,MAAM,CAAC,OAAO,CAAE,CAAC,CAAE,CAChCE,OAAOA,CAACD,EAAE,CAAE,CACR;AACA,KAAM,CAAAE,KAAK,CAAGF,EAAE,CAACG,iBAAiB,CAAC,OAAO,CAAE,CACxC;AACAC,OAAO,CAAE,KACb,CAAC,CAAC,CAEN,CACJ,CAAC,CAAC,CACF,KAAM,CAAAC,OAAQ,CAAAC,YAAA,OAEVC,EAAE,CAAGP,EAAE,CAACQ,WAAW,CAAC,OAAO,CAAE,WAAW,CAAC,MAEzCC,IAAI,CAAG,IAAK,CACR,GAAI,CAAAC,WAAW,CAAGC,SAAS,CAACC,IAAI,CAAC,OAAO,CAAE,CAAC,CAAC,CAC5C;AACAF,WAAW,CAACG,eAAe,CAAG,UAAW,CACvC,GAAI,CAAAb,EAAE,CAAGU,WAAW,CAACI,MAAM,CAC3Bd,EAAE,CAACG,iBAAiB,CAAC,OAAO,CAAE,CAACC,OAAO,CAAE,KAAK,CAAC,CAAC,CAAE;AACjD,GAAI,CAACJ,EAAE,CAACe,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC,CAAE,CAAE;AAAA,CAGhD,CAAC,CACL,CAAC,MAEDC,GAAG,CAAG,MAAAC,IAAA,EAAwC,IAAjC,CAAEC,GAAG,CAAEC,IAAI,CAAEC,KAAK,CAAEC,MAAO,CAAC,CAAAJ,IAAA,CACrC,KAAM,CAAAlB,EAAE,CAACiB,GAAG,CAAC,OAAO,CAAE,CAClBE,GAAG,CAAEA,GAAG,CACRE,KAAK,CAAEA,KAAK,CACZD,IAAI,CAAEA,IAAI,CACVE,MAAM,CAAEA,MACZ,CAAC,CAAC,CACN,CAAC,MACDC,MAAM,CAAG,KAAQ,CAAAJ,GAAG,EAAK,CACrB,KAAM,CAAAnB,EAAE,CAACuB,MAAM,CAAC,OAAO,CAAEJ,GAAG,CAAC,CACjC,CAAC,MACDK,MAAM,CAAG,SAAY,CACjB,MAAO,MAAM,CAAAxB,EAAE,CAACwB,MAAM,CAAC,OAAO,CAAC,CAEnC,CAAC,MACDC,MAAM,CAAG,KAAO,CAAAN,GAAG,EAAK,CACpB,MAAO,MAAM,CAAAnB,EAAE,CAAC0B,GAAG,CAAC,OAAO,CAACP,GAAG,CAAC,CACpC,CAAC,EACL,CAEA,cAAe,IAAI,CAAAd,OAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}