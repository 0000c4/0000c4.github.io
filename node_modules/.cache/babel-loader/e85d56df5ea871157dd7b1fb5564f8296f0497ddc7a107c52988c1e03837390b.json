{"ast":null,"code":"import { openDB } from \"idb\";\nconst db = await openDB('notes', 1, {\n  upgrade(db) {\n    // Create a store of objects\n    const store = db.createObjectStore('notes', {\n      // The 'id' property of the object will be the key.\n      keyPath: '_id'\n    });\n  }\n});\nclass localDb {\n  constructor() {\n    this.init = () => {\n      let openRequest = indexedDB.open(\"notes\", 1);\n      console.log('blaaayt');\n      // создаём хранилище объектов для books, если ешё не существует\n      openRequest.onupgradeneeded = function () {\n        let db = openRequest.result;\n        if (!db.objectStoreNames.contains('notes')) {\n          // если хранилище \"books\" не существует\n          db.createObjectStore('note1s', {\n            keyPath: '_id'\n          }); // создаём хранилище\n        }\n      };\n    };\n    this.add = async ({\n      _id,\n      body,\n      title,\n      status\n    }) => {\n      await db.add('notes', {\n        _id: _id,\n        title: title,\n        body: body,\n        status: status\n      });\n    };\n    this.delete = async _id => {\n      await db.delete('notes', _id);\n    };\n    this.getAll = async () => {\n      return await db.getAll('notes');\n    };\n  }\n}\nexport default new localDb();","map":{"version":3,"names":["openDB","db","upgrade","store","createObjectStore","keyPath","localDb","constructor","init","openRequest","indexedDB","open","console","log","onupgradeneeded","result","objectStoreNames","contains","add","_id","body","title","status","delete","getAll"],"sources":["C:/Users/vasja/coding/notes_pwa/src/local_db/localdb.js"],"sourcesContent":["import { openDB } from \"idb\";\r\nconst db = await openDB('notes', 1, {\r\n    upgrade(db) {\r\n        // Create a store of objects\r\n        const store = db.createObjectStore('notes', {\r\n            // The 'id' property of the object will be the key.\r\n            keyPath: '_id',\r\n        });\r\n\r\n    },\r\n});\r\nclass localDb {\r\n    init = () =>{\r\n        let openRequest = indexedDB.open(\"notes\", 1);\r\n        console.log('blaaayt')\r\n        // создаём хранилище объектов для books, если ешё не существует\r\n        openRequest.onupgradeneeded = function() {\r\n          let db = openRequest.result;\r\n          if (!db.objectStoreNames.contains('notes')) { // если хранилище \"books\" не существует\r\n            db.createObjectStore('note1s', {keyPath: '_id'}); // создаём хранилище\r\n          }\r\n        };\r\n    }\r\n\r\n    add = async ({ _id, body, title, status }) => {\r\n        await db.add('notes', {\r\n            _id: _id,\r\n            title: title,\r\n            body: body,\r\n            status: status\r\n        });\r\n    }\r\n    delete = async ( _id) => {\r\n        await db.delete('notes', _id);\r\n    }\r\n    getAll = async () => {\r\n        return await db.getAll('notes');\r\n    }\r\n}\r\n\r\nexport default new localDb();\r\n\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,KAAK;AAC5B,MAAMC,EAAE,GAAG,MAAMD,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE;EAChCE,OAAOA,CAACD,EAAE,EAAE;IACR;IACA,MAAME,KAAK,GAAGF,EAAE,CAACG,iBAAiB,CAAC,OAAO,EAAE;MACxC;MACAC,OAAO,EAAE;IACb,CAAC,CAAC;EAEN;AACJ,CAAC,CAAC;AACF,MAAMC,OAAO,CAAC;EAAAC,YAAA;IAAA,KACVC,IAAI,GAAG,MAAK;MACR,IAAIC,WAAW,GAAGC,SAAS,CAACC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;MAC5CC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB;MACAJ,WAAW,CAACK,eAAe,GAAG,YAAW;QACvC,IAAIb,EAAE,GAAGQ,WAAW,CAACM,MAAM;QAC3B,IAAI,CAACd,EAAE,CAACe,gBAAgB,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;UAAE;UAC5ChB,EAAE,CAACG,iBAAiB,CAAC,QAAQ,EAAE;YAACC,OAAO,EAAE;UAAK,CAAC,CAAC,CAAC,CAAC;QACpD;MACF,CAAC;IACL,CAAC;IAAA,KAEDa,GAAG,GAAG,OAAO;MAAEC,GAAG;MAAEC,IAAI;MAAEC,KAAK;MAAEC;IAAO,CAAC,KAAK;MAC1C,MAAMrB,EAAE,CAACiB,GAAG,CAAC,OAAO,EAAE;QAClBC,GAAG,EAAEA,GAAG;QACRE,KAAK,EAAEA,KAAK;QACZD,IAAI,EAAEA,IAAI;QACVE,MAAM,EAAEA;MACZ,CAAC,CAAC;IACN,CAAC;IAAA,KACDC,MAAM,GAAG,MAAQJ,GAAG,IAAK;MACrB,MAAMlB,EAAE,CAACsB,MAAM,CAAC,OAAO,EAAEJ,GAAG,CAAC;IACjC,CAAC;IAAA,KACDK,MAAM,GAAG,YAAY;MACjB,OAAO,MAAMvB,EAAE,CAACuB,MAAM,CAAC,OAAO,CAAC;IACnC,CAAC;EAAA;AACL;AAEA,eAAe,IAAIlB,OAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}